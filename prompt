Implement Row Click Navigation to Entity Detail Page for Settings Configuration Tables

  Context & Current Architecture

  The PMO application uses a universal entity system with two main page types:

  1. EntityMainPage - Lists entities in table/kanban/grid views
  2. EntityDetailPage - Shows individual entity details with dynamic tabs for child entities

  Current Behavior (Working Reference)

  When clicking a row in main entity tables (e.g., /project, /task, /biz):
  - Navigation happens via: EntityMainPage.tsx:67-69
  const handleRowClick = (item: any) => {
    navigate(`/${entityType}/${item.id}`);
  };
  - Route structure in App.tsx:
  /project → EntityMainPage (list)
  /project/:id → EntityDetailPage (detail with tabs)
  /project/:id/task → EntityChildListPage (filtered child list)
  - EntityDetailPage features (EntityDetailPage.tsx:1-527):
    - Dynamic tab system using DynamicChildEntityTabs component
    - Overview tab showing entity fields in Notion-style layout
    - Child entity tabs (e.g., "Tasks", "Wiki", "Artifacts") with filtered data
    - Edit mode with inline field editing
    - Special renderers for wiki (WikiContentRenderer) and form (InteractiveForm)

  Problem Statement

  Settings configuration pages (9 pages under /setting/*) currently display tables but do NOT navigate to detail pages when rows are clicked:

  Affected Pages:
  - /setting/projectStatus → apps/web/src/pages/setting/projectStatus.tsx
  - /setting/projectStage
  - /setting/taskStatus
  - /setting/taskStage
  - /setting/businessLevel
  - /setting/orgLevel
  - /setting/hrLevel
  - /setting/clientLevel
  - /setting/positionLevel

  Current Implementation:
  // All 9 setting pages use this structure:
  <Layout createButton={{...}}>
    <div className="flex flex-col h-full">
      <div className="flex-shrink-0 p-6 border-b border-gray-200">
        <h1>Title</h1>
        <p>Description</p>
      </div>
      <div className="flex-1 overflow-hidden">
        <FilteredDataTable entityType="projectStatus" />
      </div>
    </div>
  </Layout>

  EntityConfig for these entities (entityConfig.ts:983-1328):
  - All have supportedViews: ['table'] and defaultView: 'table'
  - All have apiEndpoint: '/api/v1/setting?category=...'
  - NONE have childEntities defined
  - All have columns and fields arrays defining their schema

  Required Implementation

  1. Row Click Navigation

  For each setting page, when a row is clicked:
  - Navigate to: /setting/{entityType}/:id
  - Examples:
    - /setting/projectStatus/uuid-123
    - /setting/taskStage/uuid-456

  2. Create EntityDetailPage-Compatible Routes

  Add routes in App.tsx (similar to line 176-220):
  {/* Setting Configuration Detail Routes */}
  <Route path="/setting/projectStatus/:id" element={
    <ProtectedRoute>
      <EntityDetailPage entityType="projectStatus" />
    </ProtectedRoute>
  } />
  <Route path="/setting/projectStage/:id" element={...} />
  {/* ...repeat for all 9 setting entities... */}

  3. Reuse EntityDetailPage Component

  The existing EntityDetailPage component should work because:
  - ✅ It loads data dynamically: const apiModule = (api as any)[${entityType}Api]
  - ✅ It renders fields from config.fields (lines 473-487)
  - ✅ It handles edit mode (inline editing)
  - ✅ It shows Notion-style minimalistic field layout
  - ✅ No child entities = no tabs (lines 86-89: returns empty array if !hasChildEntities)

  4. Ensure API Compatibility

  Verify/Update apps/web/src/lib/api.ts has individual item getters:
  export const settingApi = {
    async getItem(category: string, id: string) {
      const response = await apiClient.get(`/api/v1/setting/${category}/${id}`);
      return response.data;
    },
    // ...existing methods...
  };

  Create pseudo-API modules (if needed) to match EntityDetailPage's pattern:
  export const projectStatusApi = {
    async get(id: string) {
      return settingApi.getItem('project-status', id);
    },
    async update(id: string, data: any) {
      return settingApi.update('project-status', id, data);
    },
    async delete(id: string) {
      return settingApi.delete('project-status', id);
    }
  };
  // Repeat for all 9 setting entities...

  5. Update FilteredDataTable onRowClick

  Current behavior (FilteredDataTable.tsx:186-195):
  const handleRowClick = (record: any) => {
    if (onRowClick) {
      onRowClick(record);
    } else {
      // Default navigation based on entity type
      const entityPath = entityType === 'biz' ? '/biz' : `/${entityType}`;
      const targetPath = `${entityPath}/${record.id}`;
      navigate(targetPath);
    }
  };

  Required change for setting entities:
  const handleRowClick = (record: any) => {
    if (onRowClick) {
      onRowClick(record);
    } else {
      // Check if this is a setting entity
      const settingEntities = ['projectStatus', 'projectStage', 'taskStatus', 'taskStage',
                                'businessLevel', 'orgLevel', 'hrLevel', 'clientLevel', 'positionLevel'];

      const entityPath = settingEntities.includes(entityType)
        ? `/setting/${entityType}`
        : (entityType === 'biz' ? '/biz' : `/${entityType}`);

      const targetPath = `${entityPath}/${record.id}`;
      navigate(targetPath);
    }
  };

  Expected User Flow

  1. User clicks "Settings" in sidebar → dropdown shows 9 options
  2. User clicks "Project Status" → navigates to /setting/projectStatus
  3. Page shows table with rows (e.g., "Active", "On Hold", "Cancelled")
  4. User clicks row "Active" → navigates to /setting/projectStatus/uuid-123
  5. Page shows EntityDetailPage with:
    - Header: "Active" with back button
    - Fields in Notion-style layout: Level ID, Status Name, Description, Sort Order
    - Edit button (enables inline editing)
    - No tabs (because no child entities)
  6. User can edit → inline editing mode → Save → updates via API
  7. User clicks back arrow → returns to /setting/projectStatus table

  Design Consistency

  Must match existing EntityDetailPage styling:
  - Back button: <ArrowLeft /> with hover effect
  - Header: Small font title with entity type + ID subtitle
  - Fields: 2-column grid (160px label width) with hover background
  - Edit mode: Inline inputs with bottom border transitions
  - Buttons: Same classes as other detail pages

  Files to Modify

  1. ✅ App.tsx - Add 9 new routes for setting detail pages
  2. ✅ FilteredDataTable.tsx - Update handleRowClick for setting entities
  3. ✅ api.ts - Ensure individual item getters exist (or add pseudo-API modules)
  4. ⚠️ No changes needed to EntityDetailPage.tsx (should work as-is)
  5. ⚠️ No changes needed to setting page files (keep current table-only layout)

  Backend API Requirements

  Ensure these endpoints exist:
  - GET /api/v1/setting/{category}/{id} - Get single item
  - PUT /api/v1/setting/{category}/{id} - Update item
  - DELETE /api/v1/setting/{category}/{id} - Delete item

  Categories: project-status, project-stage, task-status, task-stage, business-level, orgLevel, hr-level, client-level, position-level


