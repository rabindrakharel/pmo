1. Entities & Dimensions

Office (d_office)

Represents physical offices.

Levels / Hierarchy:

level[0] → Office (address level)

level[1] → District (level_id, level_name)

level[2] → Region

level[3] → Corporate

Columns: id, slug, code, name, descr

Business (d_business, alias biz)

Represents departments and business units.

Levels / Hierarchy:

level[0] → Department

level[1] → Division

level[2] → Corporate

Columns: id, slug, code, name, descr

Project (d_project)

Columns: id, slug, code, name, descr, metadata, version

Task (d_task, d_task_data)

Columns:

id, slug, code, name, descr, metadata, version

project_id (FK to project)

assignee_employee_ids → uuid[]

stage → references meta_task_stage.level_name

Task Data: Each record is an update or comment.

task_id (FK)

project_id (FK)

stage → [draft, saved]

updated_by_empid

data_attachments → jsonb array of objects:

id, name, format (jpeg|png|pdf|txt|log|etc), uri

data_richtext → jsonb

Artifact (d_artifact, d_artifact_data)

Columns: id, slug, code, name, descr, metadata, version

Form (d_form_head, d_form_data)

Stores form definitions and submissions.

Columns: metadata

d_form_data.form_id = d_form_head.id

Wiki (d_wiki, d_wiki_data)

Stores knowledge pages & workflow docs.

Reports (d_reports, d_report_data)

Analytical / insight tables.

2. Common Fields Across Tables

id (uuid)

slug (varchar)

name (varchar)

descr (varchar)

tags (jsonb)

from_ts, to_ts

active_flag

created_ts

updated_ts

version

3. Meta Tables

meta_office_level (level_id, level_name)

meta_business_level (level_id, level_name)

meta_project_stage (level_id, level_name)

meta_task_stage (level_id, level_name)

meta_task_data_stage (level_id, level_name)

4. Entity Relationship Model

No direct foreign keys between most tables; everything maps via:

entity_map (entity → child_entity)

entity_id_map (entity, entity_id, child_entity, child_entity_id)

Equality Constraints / FK Mapping:

d_project.id = d_task.project_id = d_task_data.project_id

d_task.id = d_task_data.task_id

All *_data tables have similar FK relations (form_id, etc.).

entity_map

org → artifact

biz → project, artifact

biz → forms

org → employee

project → artifact, task, form

entity_id_map

Columns: entity, entity_id, child_entity, child_entity_id

Used for path building:

/entity/<child_entity>/<tab>

Example:

entity=project, entity_id=123456789, child_entity=task, child_entity_id=23456789011

5. RBAC & Permissions

Table: entity_id_rbac_map

Columns: empid, entity, entity_id, permission[]

Permissions:

0 → View

1 → Edit

2 → Share

3 → Delete

4 → Create

Key behavior:

If entity_id = 'all' and permission includes 4, user can create a new project.

Permission Checks

Can user create a project?

SELECT * FROM entity_id_rbac_map
WHERE entity = 'project'
  AND entity_id = 'all'
  AND 4 = ANY(permission);


Can user assign a project to a business department?

Must satisfy:

Project-level create permission

Business-level edit permission

WHERE entity = 'project' AND entity_id = 'all' AND 4 = ANY(permission)
AND entity = 'biz' AND entity_id = <specific_business_id> AND 1 = ANY(permission)

6. UI & Navigation Model
Main Page

Sidebar Menu: office, business, project, task, form, artifact, wiki

Top Section: grid of reports (report1, report2, report3)

Actions: create, share, delete

Main Component: Filtered Data Table

Searchable

Filterable

Scrollable

Row click: navigates to entity detail page.

Entity Detail Page

Shows:

Overview tab (inline edit allowed)

Child entity tabs (task, wiki, etc.)

Editable entity details

Clicking a child entity row:

Navigates to a new Entity Detail Page

entity = child_entity

entity_id = child_entity_id

7. Workflow Notes

All %_data tables share the same pattern:

d_task_data.task_id = d_task.id

d_form_data.form_id = d_form_head.id

etc.

Child entity clicks propagate navigation downward, turning child into active entity.

Inline editing possible from detail page.