1. Entities & Dimensions

Office (d_office)

Represents physical offices.

Levels / Hierarchy:

level[0] → Office (address level)

level[1] → District (level_id, level_name)

level[2] → Region

level[3] → Corporate

Columns: id, slug, code, name, descr

Business (d_business, alias biz)

Represents departments and business units.

Levels / Hierarchy:

level[0] → Department

level[1] → Division

level[2] → Corporate

Columns: id, slug, code, name, descr

Project (d_project)

Columns: id, slug, code, name, descr, metadata, version

Task (d_task, d_task_data)

Columns:

id, slug, code, name, descr, metadata, version

project_id (FK to project)

assignee_employee_ids → uuid[]

stage → references meta_task_stage.level_name

Task Data: Each record is an update or comment.

task_id (FK)

project_id (FK)

stage → [draft, saved]

updated_by_empid

data_attachments → jsonb array of objects:

id, name, format (jpeg|png|pdf|txt|log|etc), uri

data_richtext → jsonb

Artifact (d_artifact, d_artifact_data)

Columns: id, slug, code, name, descr, metadata, version

Form (d_form_head, d_form_data)

Stores form definitions and submissions.

Columns: metadata

d_form_data.form_id = d_form_head.id

Wiki (d_wiki, d_wiki_data)

Stores knowledge pages & workflow docs.

Reports (d_reports, d_report_data)

Analytical / insight tables.

2. Common Fields Across Tables

id (uuid)

slug (varchar)

name (varchar)

descr (varchar)

tags (jsonb)

from_ts, to_ts

active_flag

created_ts

updated_ts

version

3. Meta Tables

meta_office_level (level_id, level_name)

meta_business_level (level_id, level_name)

meta_project_stage (level_id, level_name)

meta_task_stage (level_id, level_name)

meta_task_data_stage (level_id, level_name)

4. Entity Relationship Model

No direct foreign keys between most tables; everything maps via:

entity_map (entity → child_entity)

entity_id_map (entity, entity_id, child_entity, child_entity_id)

Equality Constraints / FK Mapping:

d_project.id = d_task.project_id = d_task_data.project_id

d_task.id = d_task_data.task_id

All *_data tables have similar FK relations (form_id, etc.).

entity_map

org → artifact

biz → project, artifact

biz → forms

org → employee

project → artifact, task, form

entity_id_map

Columns: entity, entity_id, child_entity, child_entity_id

Used for path building:

/entity/<child_entity>/<tab>

Example:

entity=project, entity_id=123456789, child_entity=task, child_entity_id=23456789011

5. RBAC & Permissions

Table: entity_id_rbac_map

Columns: empid, entity, entity_id, permission[]

Permissions:

0 → View

1 → Edit

2 → Share

3 → Delete

4 → Create

Key behavior:

If entity_id = 'all' and permission includes 4, user can create a new project.

Permission Checks

Can user create a project?

SELECT * FROM entity_id_rbac_map
WHERE entity = 'project'
  AND entity_id = 'all'
  AND 4 = ANY(permission);


Can user assign a project to a business department?

Must satisfy:

Project-level create permission

Business-level edit permission

WHERE entity = 'project' AND entity_id = 'all' AND 4 = ANY(permission)
AND entity = 'biz' AND entity_id = <specific_business_id> AND 1 = ANY(permission)


-------------RBAC------------
1. entity_id = 'all' (Type-Level Permissions)
    - Grants access to ALL instances of that entity type
    - James Miller has this for all 16 entity types
    - Example: entity='project', entity_id='all' → Can access all 5 projects
  2. entity_id = <UUID> (Instance-Level Permissions)
    - Grants access to ONE specific instance only
    - Example: entity='project', entity_id='93106ffb...' → Can only access that one project
  3. active_flag = true
    - Indicates the permission is currently active and enforced
    - All of James Miller's 16 permissions are active
    - Can be set to false to temporarily revoke without deleting
  4. Permission Array {0,1,2,3,4}
    - 0 = View (read access)
    - 1 = Edit (modify data)
    - 2 = Share (grant permissions)
    - 3 = Delete (soft delete)
    - 4 = Create (create new entities)
  5. Complex Permission Check (from newspecs.txt)
  -- Can user create project AND assign to business?
  WHERE entity='project' AND entity_id='all' AND 4=ANY(permission)  -- Can create
  AND entity='biz' AND entity_id=<uuid> AND 1=ANY(permission)       -- Can edit business
  5. James Miller: ✅ AUTHORIZED (has both permissions)



Flow diagram:

  URL: /project/84215ccb-313d-48f8-9c37-4398f28c0b1f/task

  App.tsx (Line 152-157)
  ├─ Route path="/project/:id" → EntityDetailPage (parentType="project")
  │   └─ Route path="task" → EntityChildListPage (parentType="project", childType="task")
  │
  EntityDetailPage.tsx
  ├─ useParams() → id = "84215ccb-313d-48f8-9c37-4398f28c0b1f"
  ├─ props: { entityType: "project" }
  ├─ Renders tabs at top
  └─ Line 376: <Outlet /> → This renders the nested child route
      │
      └─ EntityChildListPage.tsx (Line 30)
          ├─ props: { parentType: "project", childType: "task" }
          ├─ useParams() → id = "84215ccb-313d-48f8-9c37-4398f28c0b1f" (inherited from parent route)
          ├─ Line 33: config = getEntityConfig("task")
          ├─ Line 67-103: loadChildData() → Calls API
          └─ Renders one of three views:
              ├─ Table View → FilteredDataTable
              ├─ Kanban View → KanbanBoard
              └─ Grid View → GridView

  Step-by-step breakdown:

  1. App.tsx:152-157 - Routing configuration
  <Route path="/project/:id" element={<EntityDetailPage entityType="project" />}>
    <Route path="task" element={<EntityChildListPage parentType="project" childType="task" />} />
  </Route>
  2. EntityDetailPage receives:
    - entityType="project" as a prop (from route element)
    - id from URL params via useParams()
    - Renders <Outlet /> at line 376 which is where child routes render
  3. EntityChildListPage receives:
    - parentType="project" as a prop (from route element)
    - childType="task" as a prop (from route element)
    - id from URL params via useParams() - this gets the parent's ID from the URL
    - Accesses parent ID as parentId via const { id: parentId } = useParams()
  4. Data loading in EntityChildListPage:
    - Line 73-94: Tries to call projectApi.getTasks(parentId)
    - If that doesn't exist, falls back to taskApi.list({ parentId, parentType: "project" })
  5. Rendering based on view mode (lines 200+):
    - Table view: <FilteredDataTable parentId={parentId} parentType={parentType} childType={childType} />
    - Kanban view: <KanbanBoard columns={kanbanColumns} onCardMove={handleCardMove} />
    - Grid view: <GridView items={data} titleField={...} />

  Key props passed to FilteredDataTable (when Table view is selected):
  - parentId: The project UUID from URL params
  - parentType: "project" (from route props)
  - childType: "task" (from route props)
  - config: Task entity configuration (fields, columns, etc.)
  - Various handlers: onRowClick, onBulkShare, onBulkDelete

  No props are directly passed from parent to child - React Router's <Outlet /> renders the child route component with its own props as defined in the route
  configuration.