 🎯 Key Features:

  1. Data Table Structure:

  - By Parent Entity Type: Groups assignments by type (Business Unit, Organization, Client, etc.)
  - Columns: Parent Entity Name, Assigned Date, Status, Actions
  - Clean Table Layout: Professional data table with proper headers and styling

  2. Current Assignments Display:

  - Shows Real Data: Fetches current assignments from entity_id_hierarchy_mapping table
  - Entity Names: Resolves parent entity IDs to actual names via API calls
  - Status Indicators: Shows active/inactive status with color-coded badges
  - Temporal Tracking: Displays when assignments were created

  3. Add/Remove Functionality:

  - Add New: Dropdown selectors for parent entity type and specific entity
  - Remove Existing: Trash icon to remove assignments
  - Validation: Prevents duplicate assignments
  - Eligible Parents: Only shows valid parent types from meta_entity_hierarchy

  4. Production-Grade Features:

  - Auto-Authentication: Seamlessly handles JWT login for development
  - Error Handling: Comprehensive error states and user feedback
  - Save/Cancel: Batch changes with proper state management
  - RBAC Integration: Respects edit permissions from useActionEntityPermission hook
  - Loading States: Professional loading indicators

  🔧 Technical Implementation:

  Database Integration:

  - Meta Hierarchy Rules: Uses meta_entity_hierarchy to determine valid parent types
  - Instance Mapping: Reads/writes to entity_id_hierarchy_mapping table
  - Entity Resolution: Fetches entity names from respective entity tables (d_biz, d_org, d_client, etc.)

  API Integration:

  - Current Assignments: GET /api/v1/entity-hierarchy-mapping
  - Available Parents: GET /api/v1/entity-hierarchy-mapping/available-parents
  - Save Changes: POST /api/v1/entity-hierarchy-mapping
  - Authentication: Production-grade JWT with auto-login fallback

  🎨 User Experience:

  Visual Design:

  ┌─ Entity Assignment ─────────────────────────────────────┐
  │ Parent entities assigned to project: Fall 2025...      │
  │ [2 assigned] [+ Add Assignment] [Save] [Cancel]         │
  ├─────────────────────────────────────────────────────────┤
  │ Business Units                                          │
  │ ┌─────────────────────────────────────────────────────┐ │
  │ │ Parent Entity Name    │ Assigned Date │ Status │ × │ │
  │ │ Landscaping & Grounds │ 2025-01-20   │ Active │ × │ │
  │ └─────────────────────────────────────────────────────┘ │
  │                                                         │
  │ Organizations                                           │
  │ ┌─────────────────────────────────────────────────────┐ │
  │ │ Parent Entity Name    │ Assigned Date │ Status │ × │ │
  │ │ Canada               │ 2025-01-20   │ Active │ × │ │
  │ └─────────────────────────────────────────────────────┘ │
  └─────────────────────────────────────────────────────────┘

  📍 Location:

  - Component: /home/rabin/projects/pmo/apps/web/src/components/common/EntityAssignmentDataTable.tsx
  - Integration: Used in ProjectDetailPage.tsx at the bottom of project overview
  - URL: http://localhost:5173/project/187034fa-d677-4dd5-aa6d-26485b8a3844


   EntityAssignmentDataTable Component Implementation

  ✅ Component Features:

  - Checkbox-based parent entity visualization grouped by entity type (Business Units,
  Clients, etc.)
  - Real-time parent entity assignment management with add/remove functionality
  - Production-ready API integration with proper authentication
  - RBAC permission integration ensuring users can only see/edit what they have access to
  - Responsive UI with loading states, error handling, and assignment timestamps

  ✅ Database Integration:

  - Uses meta_entity_hierarchy table to determine eligible parent types for projects
  - Uses entity_id_hierarchy_mapping table to store actual parent-child relationships
  - Supports temporal tracking with from_ts, to_ts, and active fields

  ✅ API Endpoints Created:

  1. GET /api/v1/entity/project/{projectId}/parent-assignments - Get current assignments
  2. POST /api/v1/entity/project/{projectId}/parent-assignments - Create new assignment
  3. DELETE /api/v1/entity/project/{projectId}/parent-assignments/{assignmentId} - Remove
  assignment
  4. GET /api/v1/meta/entity-hierarchy/eligible-parents?action_entity=project - Get eligible
  parent types

  ✅ Testing Results:

  - API authentication working ✓
  - Parent assignments retrieval working ✓ (showing biz assignment for Digital Transformation
   project)
  - Eligible parent types working ✓ (returns biz, client, project)
  - Business units endpoint working ✓ (returns 12 business departments)

  ✅ Component Integration:

  - Already integrated into ProjectDetailPage.tsx at line 437-443
  - Properly positioned after project information sections
  - Receives project ID, type, name, and edit permissions as props

  Primary Interface:
  - canAssign - Main boolean for assignment permissions (clean, concise
  name)
  - canViewAssignments - View-only permission for assignments
  - assignmentPermissionLoading - Loading state for permission checks

  Legacy Support:
  - canAssignMembership - Alias for canAssign (backward compatibility)

  🔗 RBAC Integration:

  Backend API Used:
  POST /api/v1/rbac/check-permission-of-entity
  Request: { entityType: "project", entityId: "uuid" }
  Response: { permissions: [{ actions: ["edit", "share", "view"] }] }

  Permission Logic:
  - canAssign = permissions.includes('edit') - Users with edit permissions
  can assign parent entities
  - canViewAssignments = permissions.includes('view') - Users with view
  permissions can see assignments

  🔧 Authentication Handling:

  Multi-source Token Discovery:
  1. localStorage.getItem('auth_token') (primary)
  2. localStorage.getItem('authToken') (alternative)
  3. sessionStorage.getItem('authToken') (fallback)

  📊 Component Integration:

  EntityAssignmentDataTable Updates:
  const { canAssign, canViewAssignments, assignmentPermissionLoading } =
    useCanAssignMembership(actionEntityType, actionEntityId);

  const effectiveCanAssign = canAssign || canEdit; // Legacy fallback

  UI Behavior:
  - Checkboxes disabled when !effectiveCanAssign
  - Assignment actions blocked when no permissions
  - Loading states during permission checks
  - Help text shown only when user can assign

  🧪 Testing Status:

  - RBAC API verified ✅ (returns edit/view/share/delete permissions for
  James Miller)
  - Hook structure complete ✅ (follows existing pattern from
  useActionEntityPermission)
  - Component integration complete ✅ (replaces hardcoded canEdit with
  RBAC-based canAssign)
  - Backward compatibility ✅ (legacy canEdit prop still supported as
  fallback)

  📝 Usage Example:

  // In any component needing assignment permissions
  const { canAssign, assignmentPermissionLoading } =
    useCanAssignMembership('project', projectId);

  if (assignmentPermissionLoading) return <LoadingSpinner />;
  if (canAssign) {
    // Show assignment UI
  }


   1. Component uses Hook (useCanAssignMembership)
  2. Hook calls API endpoint (/api/v1/rbac/check-permission-of-entity)
  3. API request hits backend Route (/rbac/check-permission-of-entity)
  4. Route processes request and returns data
  5. Hook receives response and updates state
  6. Component renders based on hook's returned state